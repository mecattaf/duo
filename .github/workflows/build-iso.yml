name: Build and Release Duo ISO

on:
  schedule:
    - cron: "0 0 1 * *" # Monthly on the 1st at midnight UTC
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a GitHub release'
        required: false
        default: true
        type: boolean

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_NAME: duo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-iso:
    name: Build Duo ISO
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      id-token: write
    outputs:
      iso_name: ${{ steps.build.outputs.iso_name }}
      timestamp: ${{ steps.date.outputs.timestamp }}
      version_tag: ${{ steps.date.outputs.version_tag }}
      iso_size: ${{ steps.check_size.outputs.iso_size }}
      iso_size_mb: ${{ steps.check_size.outputs.iso_size_mb }}
      exceeds_limit: ${{ steps.check_size.outputs.exceeds_limit }}
      
    steps:
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          android: false
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true

      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Need full history for changelog generation
          
      - name: Set Build Date
        id: date
        run: |
          TIMESTAMP="$(date +%Y%m%d)"
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          
          # Generate version tag
          VERSION_TAG="v${TIMESTAMP}"
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
          echo "version_tag=${VERSION_TAG}" >> $GITHUB_OUTPUT

      - name: Build ISO
        uses: jasonn3/build-container-installer@v1.3.0
        id: build
        with:
          arch: x86_64
          version: 42
          image_repo: ${{ env.IMAGE_REGISTRY }}
          image_name: ${{ env.IMAGE_NAME }}
          image_tag: latest
          variant: 'Sericea'
          iso_name: ${{ env.IMAGE_NAME }}-${{ env.TIMESTAMP }}.iso
          enable_cache_dnf: "false"
          enable_cache_skopeo: "false"
          enable_flatpak_dependencies: "false"

      - name: Check ISO Size
        id: check_size
        run: |
          ISO_FILE="${{ steps.build.outputs.iso_name }}"
          
          # Get file size in bytes
          ISO_SIZE=$(stat -c%s "${ISO_FILE}")
          ISO_SIZE_MB=$((ISO_SIZE / 1024 / 1024))
          
          # GitHub release asset limit is 2GB (2147483648 bytes)
          GITHUB_LIMIT=2147483648
          
          echo "iso_size=${ISO_SIZE}" >> $GITHUB_OUTPUT
          echo "iso_size_mb=${ISO_SIZE_MB}" >> $GITHUB_OUTPUT
          
          if [ ${ISO_SIZE} -gt ${GITHUB_LIMIT} ]; then
            echo "exceeds_limit=true" >> $GITHUB_OUTPUT
            echo "⚠️ ISO size (${ISO_SIZE_MB} MB) exceeds GitHub's 2GB release limit"
          else
            echo "exceeds_limit=false" >> $GITHUB_OUTPUT
            echo "✅ ISO size (${ISO_SIZE_MB} MB) is within GitHub's 2GB release limit"
          fi

      - name: Generate Additional Checksums
        id: checksums
        run: |
          # The ISO is in the workspace root
          ISO_FILE="${{ steps.build.outputs.iso_name }}"
          
          # Verify the ISO exists
          if [[ ! -f "${ISO_FILE}" ]]; then
            echo "ERROR: ISO file not found: ${ISO_FILE}"
            ls -la
            exit 1
          fi
          
          # Generate SHA256 checksum file (different name to avoid collision)
          CHECKSUM_FILE="${ISO_FILE}.sha256"
          sha256sum "${ISO_FILE}" > "${CHECKSUM_FILE}"
          
          # Create a detailed checksum file with different name
          DETAILED_CHECKSUM="${ISO_FILE}-DETAILED"
          cat > "${DETAILED_CHECKSUM}" <<EOF
          # ${{ env.IMAGE_NAME }} ISO Build
          # Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          # Version: ${{ env.VERSION_TAG }}
          # Registry: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          # Size: ${{ steps.check_size.outputs.iso_size_mb }} MB
          
          $(sha256sum "${ISO_FILE}")
          EOF
          
          echo "checksum_file=${CHECKSUM_FILE}" >> $GITHUB_OUTPUT
          echo "detailed_checksum=${DETAILED_CHECKSUM}" >> $GITHUB_OUTPUT

      - name: Prepare Upload Directory
        id: prepare
        run: |
          UPLOAD_DIR="${{ github.workspace }}/upload"
          mkdir -p "${UPLOAD_DIR}"
          
          # Copy files (don't move, to preserve originals)
          cp "${{ steps.build.outputs.iso_name }}" "${UPLOAD_DIR}/"
          
          # Copy the original CHECKSUM file created by the action
          if [[ -f "${{ steps.build.outputs.iso_name }}-CHECKSUM" ]]; then
            cp "${{ steps.build.outputs.iso_name }}-CHECKSUM" "${UPLOAD_DIR}/"
          fi
          
          # Copy our additional checksum files
          cp "${{ steps.checksums.outputs.checksum_file }}" "${UPLOAD_DIR}/"
          cp "${{ steps.checksums.outputs.detailed_checksum }}" "${UPLOAD_DIR}/"
          
          echo "upload_dir=${UPLOAD_DIR}" >> $GITHUB_OUTPUT
          
          # List files for verification
          echo "Files to upload:"
          ls -lah "${UPLOAD_DIR}/"

      - name: Upload ISO Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: duo-iso-${{ env.TIMESTAMP }}
          path: ${{ steps.prepare.outputs.upload_dir }}
          if-no-files-found: error
          retention-days: 30
          compression-level: 0

  generate-changelog:
    name: Generate Changelog
    needs: [build-iso]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      changelog_file: ${{ steps.changelog.outputs.file }}
      release_title: ${{ steps.changelog.outputs.title }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get Previous Tag
        id: prev_tag
        run: |
          # Get the most recent tag
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, using initial commit"
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "previous_tag=${PREV_TAG}" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        id: changelog
        env:
          TIMESTAMP: ${{ needs.build-iso.outputs.timestamp }}
          VERSION_TAG: ${{ needs.build-iso.outputs.version_tag }}
          ISO_SIZE_MB: ${{ needs.build-iso.outputs.iso_size_mb }}
          EXCEEDS_LIMIT: ${{ needs.build-iso.outputs.exceeds_limit }}
        run: |
          # Create changelog file
          CHANGELOG_FILE="CHANGELOG-${TIMESTAMP}.md"
          
          cat > "${CHANGELOG_FILE}" << EOF
          # Duo Linux ISO Release - ${VERSION_TAG}
          
          **Release Date:** $(date -u +"%Y-%m-%d")
          **Base Image:** Fedora Sericea 42
          **Container:** \`${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`
          **ISO Size:** ${ISO_SIZE_MB} MB
          
          ## 📦 Downloads
          
          EOF
          
          # Add download instructions based on whether ISO exceeds GitHub limit
          if [ "${EXCEEDS_LIMIT}" = "true" ]; then
            cat >> "${CHANGELOG_FILE}" << 'EOF'
          > **Note:** The ISO file exceeds GitHub's 2GB release asset limit and is available as a workflow artifact.
          
          ### Download the ISO:
          1. Go to the [Actions tab](../../actions/workflows/build-iso.yml)
          2. Click on the most recent successful workflow run
          3. Scroll down to the "Artifacts" section
          4. Download `duo-iso-${TIMESTAMP}.zip`
          5. Extract the ISO from the zip file
          
          **Direct artifact link:** [duo-iso-${TIMESTAMP}](../../actions/runs/${{ github.run_id }})
          
          EOF
          else
            cat >> "${CHANGELOG_FILE}" << EOF
          - **ISO:** \`${{ env.IMAGE_NAME }}-${TIMESTAMP}.iso\` (available in release assets below)
          EOF
          fi
          
          cat >> "${CHANGELOG_FILE}" << EOF
          - **SHA256 Checksum:** Available in release assets
          
          ## 🚀 What's New
          
          EOF
          
          # Add commit history since last tag
          echo "### Commits since ${{ steps.prev_tag.outputs.previous_tag }}" >> "${CHANGELOG_FILE}"
          echo "" >> "${CHANGELOG_FILE}"
          
          if git log ${{ steps.prev_tag.outputs.previous_tag }}..HEAD --oneline > /dev/null 2>&1; then
            git log ${{ steps.prev_tag.outputs.previous_tag }}..HEAD --pretty=format:"- %s (%h)" >> "${CHANGELOG_FILE}"
          else
            echo "- Initial release" >> "${CHANGELOG_FILE}"
          fi
          
          echo "" >> "${CHANGELOG_FILE}"
          echo "" >> "${CHANGELOG_FILE}"
          echo "## 📋 Installation" >> "${CHANGELOG_FILE}"
          echo "" >> "${CHANGELOG_FILE}"
          cat >> "${CHANGELOG_FILE}" << 'EOF'
          
          ### From ISO
          1. Download the ISO and checksum files
          2. Verify the checksum: `sha256sum -c duo-*.sha256`
          3. Write to USB: `dd if=duo-*.iso of=/dev/sdX bs=4M status=progress`
          4. Boot from USB and install
          
          ### Rebase Existing System
          ```bash
          # First rebase to unsigned image
          sudo rpm-ostree rebase ostree-unverified-registry:${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          systemctl reboot
          
          # Then rebase to signed image
          sudo rpm-ostree rebase ostree-image-signed:docker://${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          systemctl reboot
          ```
          
          ## 📚 Documentation
          
          For more information, see the [README](https://github.com/${{ github.repository }})
          
          ---
          *Automated build from commit ${{ github.sha }}*
          EOF
          
          echo "file=${CHANGELOG_FILE}" >> $GITHUB_OUTPUT
          echo "title=Duo Linux ISO - ${VERSION_TAG}" >> $GITHUB_OUTPUT

      - name: Upload Changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog-${{ needs.build-iso.outputs.timestamp }}
          path: ${{ steps.changelog.outputs.file }}
          retention-days: 7

  create-release:
    name: Create GitHub Release
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    needs: [build-iso, generate-changelog]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Download ISO Artifact
        uses: actions/download-artifact@v5
        with:
          name: duo-iso-${{ needs.build-iso.outputs.timestamp }}
          path: ./release-assets

      - name: Download Changelog
        uses: actions/download-artifact@v5
        with:
          name: changelog-${{ needs.build-iso.outputs.timestamp }}
          path: ./

      - name: Prepare Release Assets
        id: prepare_assets
        run: |
          # If ISO exceeds GitHub limit, don't include it in release
          if [ "${{ needs.build-iso.outputs.exceeds_limit }}" = "true" ]; then
            echo "ISO exceeds 2GB limit, excluding from release assets"
            # Keep only checksum files
            mkdir -p ./release-assets-filtered
            find ./release-assets -type f ! -name "*.iso" -exec cp {} ./release-assets-filtered/ \;
            echo "assets_dir=./release-assets-filtered" >> $GITHUB_OUTPUT
          else
            echo "ISO within size limit, including in release"
            echo "assets_dir=./release-assets" >> $GITHUB_OUTPUT
          fi

      - name: List Release Assets
        run: |
          echo "Release assets:"
          ls -lah ${{ steps.prepare_assets.outputs.assets_dir }}/
          echo ""
          echo "Changelog:"
          ls -lah ./*.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-iso.outputs.version_tag }}
          name: ${{ needs.generate-changelog.outputs.release_title }}
          body_path: ./CHANGELOG-${{ needs.build-iso.outputs.timestamp }}.md
          draft: false
          prerelease: false
          make_latest: true
          files: |
            ${{ steps.prepare_assets.outputs.assets_dir }}/*
          fail_on_unmatched_files: false
          generate_release_notes: false

      - name: Clean up old releases (optional)
        if: github.event_name == 'schedule'  # Only on scheduled runs
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Keep only the last 3 releases
          gh release list --limit 100 --json tagName,createdAt | \
            jq -r '.[3:] | .[].tagName' | \
            xargs -I {} gh release delete {} --yes --cleanup-tag || true

  summary:
    name: Build Summary
    if: always()
    needs: [build-iso, create-release]
    runs-on: ubuntu-latest
    permissions:
      actions: read
      
    steps:
      - name: Create Summary
        run: |
          echo "## 📊 Duo ISO Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-iso.result }}" == "success" ]]; then
            echo "✅ **ISO Build:** Successful" >> $GITHUB_STEP_SUMMARY
            echo "- ISO Name: \`${{ needs.build-iso.outputs.iso_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Version: \`${{ needs.build-iso.outputs.version_tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Size: ${{ needs.build-iso.outputs.iso_size_mb }} MB" >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ needs.build-iso.outputs.exceeds_limit }}" == "true" ]]; then
              echo "- ⚠️ **Note:** ISO exceeds GitHub's 2GB release limit" >> $GITHUB_STEP_SUMMARY
              echo "- 📦 **Download:** Available as workflow artifact" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **ISO Build:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.create-release.result }}" == "success" ]]; then
            echo "✅ **Release Creation:** Successful" >> $GITHUB_STEP_SUMMARY
            echo "🔗 [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.build-iso.outputs.version_tag }})" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.create-release.result }}" == "skipped" ]]; then
            echo "⏭️ **Release Creation:** Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Release Creation:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered By:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
